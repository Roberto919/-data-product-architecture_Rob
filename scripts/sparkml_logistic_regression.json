{"paragraphs":[{"text":"%pyspark\nspark","user":"anonymous","dateUpdated":"2020-03-31T19:42:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585683766790_847540842","id":"20200331-194246_1808454426","dateCreated":"2020-03-31T19:42:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:483","dateFinished":"2020-03-31T19:43:17+0000","dateStarted":"2020-03-31T19:42:51+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<pyspark.sql.session.SparkSession object at 0x7f27df2ddf10>\n"}]}},{"text":"%pyspark \nfrom pyspark.ml.linalg import Vectors\nfrom pyspark.ml.classification import LogisticRegression\n\n","user":"anonymous","dateUpdated":"2020-03-31T19:43:20+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1585683757216_47364998","id":"20200331-192920_1938279315","dateCreated":"2020-03-31T19:42:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:236","dateFinished":"2020-03-31T19:43:20+0000","dateStarted":"2020-03-31T19:43:20+0000"},{"text":"%md\nEn Spark se puede crear un DataFrame de un RDD, de una lista o de un DataFrame de Pandas, aquí lo estamos creando con una lista que contiene tuplas de (label, features)\ntal cual lo hacíamos en sklearn, y le estamos agregando los nombres de cada columna.\n\n`Vectors.dense` recibe una lista como parámetro\n\nEste DataFrame lo estamos ocupando como nuestro set de entrenamiento mock!","user":"anonymous","dateUpdated":"2020-03-31T19:42:37+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>En Spark se puede crear un DataFrame de un RDD, de una lista o de un DataFrame de Pandas, aquí lo estamos creando con una lista que contiene tuplas de (label, features)<br/>tal cual lo hacíamos en sklearn, y le estamos agregando los nombres de cada columna.</p>\n<p><code>Vectors.dense</code> recibe una lista como parámetro</p>\n<p>Este DataFrame lo estamos ocupando como nuestro set de entrenamiento mock!</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1585683757221_103270202","id":"20200331-193424_160700077","dateCreated":"2020-03-31T19:42:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:237"},{"text":"%pyspark\ntraining = spark.createDataFrame([\n    (1.0, Vectors.dense([0.0, 1.1, 0.1])),\n    (0.0, Vectors.dense([2.0, 1.0, -1.0])),\n    (0.0, Vectors.dense([2.0, 1.3, 1.0])),\n    (1.0, Vectors.dense([0.0, 1.2, -0.5]))], [\"label\", \"features\"])\n","user":"anonymous","dateUpdated":"2020-03-31T19:43:46+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585683757221_1926983535","id":"20200331-193405_714396445","dateCreated":"2020-03-31T19:42:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:238","dateFinished":"2020-03-31T19:43:47+0000","dateStarted":"2020-03-31T19:43:46+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\nComo lo hacíamos en sklearn, primero instanciamos el modelo que quremos ocupar con los parámetros que nosotros queremos tener para este modelo en particular --configuramos el modelo--","user":"anonymous","dateUpdated":"2020-03-31T19:45:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585683841547_371609712","id":"20200331-194401_980887898","dateCreated":"2020-03-31T19:44:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:845","dateFinished":"2020-03-31T19:45:07+0000","dateStarted":"2020-03-31T19:45:07+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Como lo hacíamos en sklearn, primero instanciamos el modelo que quremos ocupar con los parámetros que nosotros queremos tener para este modelo en particular &ndash;configuramos el modelo&ndash;</p>\n</div>"}]}},{"text":"%pyspark\nlr = LogisticRegression(maxIter=10, regParam=0.01)","user":"anonymous","dateUpdated":"2020-03-31T19:44:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585683828986_743979928","id":"20200331-194348_697569694","dateCreated":"2020-03-31T19:43:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:701","dateFinished":"2020-03-31T19:44:51+0000","dateStarted":"2020-03-31T19:44:51+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\nVeamos la documentacion del modelo y que parametros le pusimos a nuestra configuración\n","user":"anonymous","dateUpdated":"2020-03-31T19:46:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585683917457_261109868","id":"20200331-194517_1393680986","dateCreated":"2020-03-31T19:45:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:983","dateFinished":"2020-03-31T19:46:45+0000","dateStarted":"2020-03-31T19:46:45+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Veamos la documentacion del modelo y que parametros le pusimos a nuestra configuración</p>\n</div>"}]}},{"text":"%pyspark\nprint(\"LogisticRegression parameters:\\n\" + lr.explainParams() + \"\\n\")\n","user":"anonymous","dateUpdated":"2020-03-31T19:46:55+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585683826280_474970308","id":"20200331-194346_173662388","dateCreated":"2020-03-31T19:43:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:620","dateFinished":"2020-03-31T19:46:55+0000","dateStarted":"2020-03-31T19:46:55+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"LogisticRegression parameters:\naggregationDepth: suggested depth for treeAggregate (>= 2). (default: 2)\nelasticNetParam: the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty. (default: 0.0)\nfamily: The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial (default: auto)\nfeaturesCol: features column name. (default: features)\nfitIntercept: whether to fit an intercept term. (default: True)\nlabelCol: label column name. (default: label)\nlowerBoundsOnCoefficients: The lower bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. (undefined)\nlowerBoundsOnIntercepts: The lower bounds on intercepts if fitting under bound constrained optimization. The bounds vector size must beequal with 1 for binomial regression, or the number oflasses for multinomial regression. (undefined)\nmaxIter: max number of iterations (>= 0). (default: 100, current: 10)\npredictionCol: prediction column name. (default: prediction)\nprobabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability)\nrawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction)\nregParam: regularization parameter (>= 0). (default: 0.0, current: 0.01)\nstandardization: whether to standardize the training features before fitting the model. (default: True)\nthreshold: Threshold in binary classification prediction, in range [0, 1]. If threshold and thresholds are both set, they must match.e.g. if threshold is p, then thresholds must be equal to [1-p, p]. (default: 0.5)\nthresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class's threshold. (undefined)\ntol: the convergence tolerance for iterative algorithms (>= 0). (default: 1e-06)\nupperBoundsOnCoefficients: The upper bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. (undefined)\nupperBoundsOnIntercepts: The upper bounds on intercepts if fitting under bound constrained optimization. The bound vector size must be equal with 1 for binomial regression, or the number of classes for multinomial regression. (undefined)\nweightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined)\n\n"}]}},{"text":"%md\nOcupemos el modelo que configuramos para entrenar con lo datos que creamos en el DataFrame training","user":"anonymous","dateUpdated":"2020-03-31T19:48:22+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684089869_-643517434","id":"20200331-194809_1153383484","dateCreated":"2020-03-31T19:48:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1161","dateFinished":"2020-03-31T19:48:22+0000","dateStarted":"2020-03-31T19:48:22+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Ocupemos el modelo que configuramos para entrenar con lo datos que creamos en el DataFrame training</p>\n</div>"}]}},{"text":"%pyspark\nmodel_1 = lr.fit(training)","user":"anonymous","dateUpdated":"2020-03-31T19:48:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684015629_586540767","id":"20200331-194655_1718719116","dateCreated":"2020-03-31T19:46:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1073","dateFinished":"2020-03-31T19:48:43+0000","dateStarted":"2020-03-31T19:48:30+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n`model_1` es un *transfomer* creado a través de un *estimator* (LogisticRegression)\n","user":"anonymous","dateUpdated":"2020-03-31T19:49:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684110249_416921712","id":"20200331-194830_734416736","dateCreated":"2020-03-31T19:48:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1257","dateFinished":"2020-03-31T19:49:08+0000","dateStarted":"2020-03-31T19:49:08+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><code>model_1</code> es un <em>transfomer</em> creado a través de un <em>estimator</em> (LogisticRegression)</p>\n</div>"}]}},{"text":"%pyspark\nprint(\"Model 1 was fit using parameters: \")","user":"anonymous","dateUpdated":"2020-03-31T19:49:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684147982_545254118","id":"20200331-194907_950617533","dateCreated":"2020-03-31T19:49:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1355","dateFinished":"2020-03-31T19:49:20+0000","dateStarted":"2020-03-31T19:49:20+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Model 1 was fit using parameters: \n"}]}},{"text":"%md\nAquí estamos obteniendo la configuración con la que se entreno la regresión logística que ocupamos\n","user":"anonymous","dateUpdated":"2020-03-31T19:53:58+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684411557_-982605725","id":"20200331-195331_1063824886","dateCreated":"2020-03-31T19:53:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1729","dateFinished":"2020-03-31T19:53:58+0000","dateStarted":"2020-03-31T19:53:58+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Aquí estamos obteniendo la configuración con la que se entreno la regresión logística que ocupamos</p>\n</div>"}]}},{"text":"%pyspark\n\nprint(lr.extractParamMap())","user":"anonymous","dateUpdated":"2020-03-31T19:51:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684182517_-1371233411","id":"20200331-194942_1096097516","dateCreated":"2020-03-31T19:49:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1542","dateFinished":"2020-03-31T19:49:53+0000","dateStarted":"2020-03-31T19:49:53+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"{Param(parent=u'LogisticRegression_7b944a8ca4b9', name='labelCol', doc='label column name.'): 'label', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='regParam', doc='regularization parameter (>= 0).'): 0.01, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='probabilityCol', doc='Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.'): 'probability', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='elasticNetParam', doc='the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty.'): 0.0, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='featuresCol', doc='features column name.'): 'features', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='predictionCol', doc='prediction column name.'): 'prediction', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='fitIntercept', doc='whether to fit an intercept term.'): True, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='family', doc='The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial'): 'auto', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='rawPredictionCol', doc='raw prediction (a.k.a. confidence) column name.'): 'rawPrediction', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='standardization', doc='whether to standardize the training features before fitting the model.'): True, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='aggregationDepth', doc='suggested depth for treeAggregate (>= 2).'): 2, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='threshold', doc='Threshold in binary classification prediction, in range [0, 1]. If threshold and thresholds are both set, they must match.e.g. if threshold is p, then thresholds must be equal to [1-p, p].'): 0.5, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='maxIter', doc='max number of iterations (>= 0).'): 10, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='tol', doc='the convergence tolerance for iterative algorithms (>= 0).'): 1e-06}\n"}]}},{"text":"%md\nTambién podemos especificar los parámetros con los que queremos que corra el modelo utilizando el diccionario de `ParamMap`.\n\nCreamos un diccionario -se puede llamar como quieras!- que tenga como llave el nombre del parámetro que quieres modificar, con el valor correspondiente.\n","user":"anonymous","dateUpdated":"2020-03-31T19:55:12+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684193680_-1709130102","id":"20200331-194953_1419747427","dateCreated":"2020-03-31T19:49:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1631","dateFinished":"2020-03-31T19:55:12+0000","dateStarted":"2020-03-31T19:55:12+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>También podemos especificar los parámetros con los que queremos que corra el modelo utilizando el diccionario de <code>ParamMap</code>.</p>\n<p>Creamos un diccionario -se puede llamar como quieras!- que tenga como llave el nombre del parámetro que quieres modificar, con el valor correspondiente.</p>\n</div>"}]}},{"text":"%pyspark\n\nparam_map = {lr.maxIter: 20}\n# Si el valor ya existe en el diccionario puedes actualizarlo\nparam_map[lr.maxIter] = 30  \n# También puedes actualizar varios parámetros del diccionario al mismo tiempo\nparam_map.update({lr.regParam: 0.1, lr.threshold: 0.55}) \n","user":"anonymous","dateUpdated":"2020-03-31T19:56:26+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684512128_-158534529","id":"20200331-195512_1914854346","dateCreated":"2020-03-31T19:55:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1834","dateFinished":"2020-03-31T19:56:26+0000","dateStarted":"2020-03-31T19:56:26+0000","errorMessage":""},{"text":"%md\nSe pueden combinar diferentes diccionarios, realmente puedes tener un sólo diccionario con los parámetros de diversos modelos que ocupes en el*pipeline* sin ningun problema, pues el valor asociado es por objeto (ID). Aquí estamos cambiando el nombre de la columna que guarda la salida del modelo, por *default* se llama `probability` $rightarrow$ verificar documentacion del método.","user":"anonymous","dateUpdated":"2020-03-31T19:58:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684560951_-1968700158","id":"20200331-195600_556572292","dateCreated":"2020-03-31T19:56:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1918","dateFinished":"2020-03-31T19:58:28+0000","dateStarted":"2020-03-31T19:58:28+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Se pueden combinar diferentes diccionarios, realmente puedes tener un sólo diccionario con los parámetros de diversos modelos que ocupes en el*pipeline* sin ningun problema, pues el valor asociado es por objeto (ID). Aquí estamos cambiando el nombre de la columna que guarda la salida del modelo, por <em>default</em> se llama <code>probability</code> $rightarrow$ verificar documentacion del método.</p>\n</div>"}]}},{"text":"%pyspark\n\nparam_map_2 = {lr.probabilityCol: \"my_probability\"}  \nparam_map_combined = param_map.copy()\nparam_map_combined.update(param_map_2)\n#puedes ver el contenido del diccionario con param_map_combined.items() -> python 3.5.2","user":"anonymous","dateUpdated":"2020-03-31T19:59:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684708095_-512112522","id":"20200331-195828_2007628338","dateCreated":"2020-03-31T19:58:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2015","dateFinished":"2020-03-31T19:59:06+0000","dateStarted":"2020-03-31T19:59:06+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n\nEntrenemos una segunda regresión logística con los nuevos parámetros que establecimos a traves del `paramMap`.\n\nEn este `fit` estamos enviando tanto los datos, como los parámetros a ocupar en el modelo de regresión logística","user":"anonymous","dateUpdated":"2020-03-31T20:01:12+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684795994_1312831042","id":"20200331-195955_181918557","dateCreated":"2020-03-31T19:59:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2282","dateFinished":"2020-03-31T20:01:12+0000","dateStarted":"2020-03-31T20:01:12+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Entrenemos una segunda regresión logística con los nuevos parámetros que establecimos a traves del <code>paramMap</code>.</p>\n<p>En este <code>fit</code> estamos enviando tanto los datos, como los parámetros a ocupar en el modelo de regresión logística</p>\n</div>"}]}},{"text":"%pyspark\n\nmodel_2 = lr.fit(training, param_map_combined)\nprint(\"Model 2 was fit using parameters: \")\n#aquí queremos ver cono que parametros se quedo configurado el modelo que ocupamos para entrenar\nprint(lr.extractParamMap())","user":"anonymous","dateUpdated":"2020-03-31T19:59:53+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684727532_-1234855580","id":"20200331-195847_474156291","dateCreated":"2020-03-31T19:58:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2099","dateFinished":"2020-03-31T19:59:55+0000","dateStarted":"2020-03-31T19:59:53+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Model 2 was fit using parameters: \n{Param(parent=u'LogisticRegression_7b944a8ca4b9', name='labelCol', doc='label column name.'): 'label', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='regParam', doc='regularization parameter (>= 0).'): 0.01, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='probabilityCol', doc='Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.'): 'probability', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='elasticNetParam', doc='the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty.'): 0.0, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='featuresCol', doc='features column name.'): 'features', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='predictionCol', doc='prediction column name.'): 'prediction', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='fitIntercept', doc='whether to fit an intercept term.'): True, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='family', doc='The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial'): 'auto', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='rawPredictionCol', doc='raw prediction (a.k.a. confidence) column name.'): 'rawPrediction', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='standardization', doc='whether to standardize the training features before fitting the model.'): True, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='aggregationDepth', doc='suggested depth for treeAggregate (>= 2).'): 2, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='threshold', doc='Threshold in binary classification prediction, in range [0, 1]. If threshold and thresholds are both set, they must match.e.g. if threshold is p, then thresholds must be equal to [1-p, p].'): 0.5, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='maxIter', doc='max number of iterations (>= 0).'): 10, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='tol', doc='the convergence tolerance for iterative algorithms (>= 0).'): 1e-06}\n"}]}},{"text":"%pyspark\n\n#aqui queremos ver con qué parámetros se quedó configurado el modelo que ocupamos para entrenar\nprint(lr.extractParamMap())","user":"anonymous","dateUpdated":"2020-03-31T20:01:55+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684793026_-655291152","id":"20200331-195953_1068346140","dateCreated":"2020-03-31T19:59:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2180","dateFinished":"2020-03-31T20:01:55+0000","dateStarted":"2020-03-31T20:01:55+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"{Param(parent=u'LogisticRegression_7b944a8ca4b9', name='labelCol', doc='label column name.'): 'label', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='regParam', doc='regularization parameter (>= 0).'): 0.01, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='probabilityCol', doc='Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.'): 'probability', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='elasticNetParam', doc='the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty.'): 0.0, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='featuresCol', doc='features column name.'): 'features', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='predictionCol', doc='prediction column name.'): 'prediction', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='fitIntercept', doc='whether to fit an intercept term.'): True, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='family', doc='The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial'): 'auto', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='rawPredictionCol', doc='raw prediction (a.k.a. confidence) column name.'): 'rawPrediction', Param(parent=u'LogisticRegression_7b944a8ca4b9', name='standardization', doc='whether to standardize the training features before fitting the model.'): True, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='aggregationDepth', doc='suggested depth for treeAggregate (>= 2).'): 2, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='threshold', doc='Threshold in binary classification prediction, in range [0, 1]. If threshold and thresholds are both set, they must match.e.g. if threshold is p, then thresholds must be equal to [1-p, p].'): 0.5, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='maxIter', doc='max number of iterations (>= 0).'): 10, Param(parent=u'LogisticRegression_7b944a8ca4b9', name='tol', doc='the convergence tolerance for iterative algorithms (>= 0).'): 1e-06}\n"}]}},{"text":"%md\nCreemos el *data frame* que tendra los datos de prueba *mock*!\n","user":"anonymous","dateUpdated":"2020-03-31T20:02:35+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684928518_-1334973037","id":"20200331-200208_1530731409","dateCreated":"2020-03-31T20:02:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2469","dateFinished":"2020-03-31T20:02:35+0000","dateStarted":"2020-03-31T20:02:35+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Creemos el <em>data frame</em> que tendra los datos de prueba <em>mock</em>!</p>\n</div>"}]}},{"text":"%pyspark\ntest = spark.createDataFrame([\n    (1.0, Vectors.dense([-1.0, 1.5, 1.3])),\n    (0.0, Vectors.dense([3.0, 2.0, -0.1])),\n    (1.0, Vectors.dense([0.0, 2.2, -1.5]))], [\"label\", \"features\"])","user":"anonymous","dateUpdated":"2020-03-31T20:02:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684915117_1734111626","id":"20200331-200155_976759268","dateCreated":"2020-03-31T20:01:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2381","dateFinished":"2020-03-31T20:02:38+0000","dateStarted":"2020-03-31T20:02:38+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n\nAhora sí, hagamos predicciones sobre el *set* de pruebas utilizando el método `transform` (aquí no hay `predict`!)\n","user":"anonymous","dateUpdated":"2020-03-31T20:10:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684985472_-1166474704","id":"20200331-200305_1380308216","dateCreated":"2020-03-31T20:03:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2712","dateFinished":"2020-03-31T20:10:44+0000","dateStarted":"2020-03-31T20:10:44+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Ahora sí, hagamos predicciones sobre el <em>set</em> de pruebas utilizando el método <code>transform</code> (aquí no hay <code>predict</code>!)</p>\n</div>"}]}},{"text":"%pyspark\nprediction = model_2.transform(test)","user":"anonymous","dateUpdated":"2020-03-31T20:03:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684958468_1648974828","id":"20200331-200238_1097204668","dateCreated":"2020-03-31T20:02:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2565","dateFinished":"2020-03-31T20:03:03+0000","dateStarted":"2020-03-31T20:03:03+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n\nLa respuesta es un DataFrame (la salida de un `transform` en su *DataFrame*) por lo que podemos aplicarle los métodos de SparkSQL :)\nVerificamos que si es un *DataFrame*\n","user":"anonymous","dateUpdated":"2020-03-31T20:05:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585684983448_-481270752","id":"20200331-200303_1709345112","dateCreated":"2020-03-31T20:03:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2640","dateFinished":"2020-03-31T20:05:59+0000","dateStarted":"2020-03-31T20:05:59+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>La respuesta es un DataFrame (la salida de un <code>transform</code> en su <em>DataFrame</em>) por lo que podemos aplicarle los métodos de SparkSQL :)<br/>Verificamos que si es un <em>DataFrame</em></p>\n</div>"}]}},{"text":"%pyspark\ntype(prediction)","user":"anonymous","dateUpdated":"2020-03-31T20:06:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585685149777_659574957","id":"20200331-200549_727335789","dateCreated":"2020-03-31T20:05:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2785","dateFinished":"2020-03-31T20:06:13+0000","dateStarted":"2020-03-31T20:06:13+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<class 'pyspark.sql.dataframe.DataFrame'>\n"}]}},{"text":"%pyspark\n\n# veamos qué columnas tiene este DataFrame (como el names de R)\nprediction.columns","user":"anonymous","dateUpdated":"2020-03-31T20:07:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585685173349_-728773987","id":"20200331-200613_545927987","dateCreated":"2020-03-31T20:06:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2897","dateFinished":"2020-03-31T20:07:07+0000","dateStarted":"2020-03-31T20:07:07+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['label', 'features', 'rawPrediction', 'my_probability', 'prediction']\n"}]}},{"text":"%md\n\nAquí estamos seleccionando las columnas features, label, \n`my_probability` -> que es el nombre que nosotros especificamos anteriormente en `ParamMap`, y la columna prediction que es el nombre por default que regresa el modelo al parámetro `predictionCol` -> ver documentación.\n\nEl `collect` hará que se regresen los resultados al *drive*!!! ","user":"anonymous","dateUpdated":"2020-03-31T20:09:25+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585685237279_-1587667412","id":"20200331-200717_1942727431","dateCreated":"2020-03-31T20:07:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3258","dateFinished":"2020-03-31T20:09:25+0000","dateStarted":"2020-03-31T20:09:25+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Aquí estamos seleccionando las columnas features, label,<br/><code>my_probability</code> -&gt; que es el nombre que nosotros especificamos anteriormente en <code>ParamMap</code>, y la columna prediction que es el nombre por default que regresa el modelo al parámetro <code>predictionCol</code> -&gt; ver documentación.</p>\n<p>El <code>collect</code> hará que se regresen los resultados al <em>drive</em>!!!</p>\n</div>"}]}},{"text":"%pyspark\nresult = prediction.select(\"features\", \"label\", \"my_probability\", \"prediction\") \\\n    .collect()\n","user":"anonymous","dateUpdated":"2020-03-31T20:06:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585685181825_-308671409","id":"20200331-200621_1687579876","dateCreated":"2020-03-31T20:06:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2985","dateFinished":"2020-03-31T20:06:35+0000","dateStarted":"2020-03-31T20:06:34+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\nfor row in result:\n    print(\"features={}, label={} -> prob={}, prediction={}\".format( \\\n    row.features, row.label, row.my_probability, row.prediction))","user":"anonymous","dateUpdated":"2020-03-31T20:06:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585685194753_-1604555334","id":"20200331-200634_1327259596","dateCreated":"2020-03-31T20:06:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3073","dateFinished":"2020-03-31T20:06:48+0000","dateStarted":"2020-03-31T20:06:48+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"features=[-1.0,1.5,1.3], label=1.0 -> prob=[0.057073041710340174,0.9429269582896599], prediction=1.0\nfeatures=[3.0,2.0,-0.1], label=0.0 -> prob=[0.9238522311704104,0.07614776882958973], prediction=0.0\nfeatures=[0.0,2.2,-1.5], label=1.0 -> prob=[0.10972776114779419,0.8902722388522057], prediction=1.0\n"}]}},{"text":"%pyspark\ntype(model_1)","user":"anonymous","dateUpdated":"2020-03-31T20:12:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585685208524_-903611499","id":"20200331-200648_2030398949","dateCreated":"2020-03-31T20:06:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3154","dateFinished":"2020-03-31T20:12:48+0000","dateStarted":"2020-03-31T20:12:48+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<class 'pyspark.ml.classification.LogisticRegressionModel'>\n"}]}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-03-31T20:12:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1585685568803_1906398382","id":"20200331-201248_687619397","dateCreated":"2020-03-31T20:12:48+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3417"}],"name":"sparkml_1","id":"2F4Y5KDXQ","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}